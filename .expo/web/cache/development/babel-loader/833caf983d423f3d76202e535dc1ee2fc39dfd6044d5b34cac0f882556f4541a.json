{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logEnabledFeatures = exports.log = void 0;\nexports.setLogLevel = setLogLevel;\nvar _index = _interopRequireDefault(require(\"../modules/logger/index.js\"));\nvar name = \"webpack-dev-server\";\nvar defaultLevel = \"info\";\nfunction setLogLevel(level) {\n  _index.default.configureDefaultLogger({\n    level: level\n  });\n}\nsetLogLevel(defaultLevel);\nvar log = _index.default.getLogger(name);\nexports.log = log;\nvar logEnabledFeatures = function logEnabledFeatures(features) {\n  var enabledFeatures = Object.keys(features);\n  if (!features || enabledFeatures.length === 0) {\n    return;\n  }\n  var logString = \"Server started:\";\n  for (var i = 0; i < enabledFeatures.length; i++) {\n    var key = enabledFeatures[i];\n    logString += \" \".concat(key, \" \").concat(features[key] ? \"enabled\" : \"disabled\", \",\");\n  }\n  logString = logString.slice(0, -1).concat(\".\");\n  log.info(logString);\n};\nexports.logEnabledFeatures = logEnabledFeatures;","map":{"version":3,"names":["_index","_interopRequireDefault","require","name","defaultLevel","setLogLevel","level","logger","configureDefaultLogger","log","getLogger","exports","logEnabledFeatures","features","enabledFeatures","Object","keys","length","logString","i","key","concat","slice","info"],"sources":["C:/Users/Yousuf/AppData/Roaming/npm/node_modules/expo-cli/node_modules/webpack-dev-server/client/utils/log.js"],"sourcesContent":["import logger from \"../modules/logger/index.js\";\nvar name = \"webpack-dev-server\";\n// default level is set on the client side, so it does not need\n// to be set by the CLI or API\nvar defaultLevel = \"info\";\n\n// options new options, merge with old options\n/**\n * @param {false | true | \"none\" | \"error\" | \"warn\" | \"info\" | \"log\" | \"verbose\"} level\n * @returns {void}\n */\nfunction setLogLevel(level) {\n  logger.configureDefaultLogger({\n    level: level\n  });\n}\nsetLogLevel(defaultLevel);\nvar log = logger.getLogger(name);\nvar logEnabledFeatures = function logEnabledFeatures(features) {\n  var enabledFeatures = Object.keys(features);\n  if (!features || enabledFeatures.length === 0) {\n    return;\n  }\n  var logString = \"Server started:\";\n\n  // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.\n  for (var i = 0; i < enabledFeatures.length; i++) {\n    var key = enabledFeatures[i];\n    logString += \" \".concat(key, \" \").concat(features[key] ? \"enabled\" : \"disabled\", \",\");\n  }\n  // replace last comma with a period\n  logString = logString.slice(0, -1).concat(\".\");\n  log.info(logString);\n};\nexport { log, logEnabledFeatures, setLogLevel };"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAIC,IAAI,GAAG,oBAAoB;AAG/B,IAAIC,YAAY,GAAG,MAAM;AAOzB,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1BC,cAAM,CAACC,sBAAsB,CAAC;IAC5BF,KAAK,EAAEA;EACT,CAAC,CAAC;AACJ;AACAD,WAAW,CAACD,YAAY,CAAC;AACzB,IAAIK,GAAG,GAAGF,cAAM,CAACG,SAAS,CAACP,IAAI,CAAC;AAACQ,OAAA,CAAAF,GAAA,GAAAA,GAAA;AACjC,IAAIG,kBAAkB,GAAG,SAASA,kBAAkBA,CAACC,QAAQ,EAAE;EAC7D,IAAIC,eAAe,GAAGC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC;EAC3C,IAAI,CAACA,QAAQ,IAAIC,eAAe,CAACG,MAAM,KAAK,CAAC,EAAE;IAC7C;EACF;EACA,IAAIC,SAAS,GAAG,iBAAiB;EAGjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,eAAe,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;IAC/C,IAAIC,GAAG,GAAGN,eAAe,CAACK,CAAC,CAAC;IAC5BD,SAAS,IAAI,GAAG,CAACG,MAAM,CAACD,GAAG,EAAE,GAAG,CAAC,CAACC,MAAM,CAACR,QAAQ,CAACO,GAAG,CAAC,GAAG,SAAS,GAAG,UAAU,EAAE,GAAG,CAAC;EACvF;EAEAF,SAAS,GAAGA,SAAS,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACD,MAAM,CAAC,GAAG,CAAC;EAC9CZ,GAAG,CAACc,IAAI,CAACL,SAAS,CAAC;AACrB,CAAC;AAACP,OAAA,CAAAC,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}